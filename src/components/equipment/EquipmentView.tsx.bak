'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { EquipmentTable } from './EquipmentTable'
import { EquipmentFilters } from './EquipmentFilters'
import { AddEquipmentDialog } from './AddEquipmentDialog'
import { useUser } from '@clerk/nextjs'
import { format, differenceInDays } from 'date-fns'
import { toast } from 'sonner'
import { useDatabase } from '@/lib/database'
import { 
  Plus,
  Wrench,
  Truck,
  Calendar,
  AlertTriangle,
  CheckCircle2,
  Activity,
  DollarSign,
  TrendingUp,
  Settings
} from 'lucide-react'

export interface Equipment {
  totalEquipment: number
  availableEquipment: number
  inUseEquipment: number
  maintenanceEquipment: number
  retiredEquipment: number
  totalValue: number
  totalPurchaseValue: number
}

export function EquipmentView() {
  const { user } = useUser()
  const { db, isReady } = useDatabase()
  const [equipment, setEquipment] = useState<Equipment[]>([])
  const [stats, setStats] = useState<EquipmentStats | null>(null)
  const [categories, setCategories] = useState<string[]>([])
  const [locations, setLocations] = useState<string[]>([])
  const [assignedUsers, setAssignedUsers] = useState<string[]>([])
  const [manufacturers, setManufacturers] = useState<string[]>([])
  const [filters, setFilters] = useState<EquipmentFilters>({
    search: '',
    type: 'all',
    category: 'all',
    status: 'all',
    condition: 'all',
    location: 'all',
    assignedTo: 'all',
    maintenanceStatus: 'all'
  })
  const [selectedEquipment, setSelectedEquipment] = useState<string[]>([])
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(true)

  // Fetch equipment data directly from Supabase
  const fetchEquipment = async () => {
    try {
      if (!isReady) return
      setIsLoading(true)

      // Base query
      let query = db.from('equipment').select('*')

      // Apply simple filters supported by schema
      if (filters.search) {
        const s = filters.search
        query = query.or(`name.ilike.%${s}%,equipment_number.ilike.%${s}%,model.ilike.%${s}%,serial_number.ilike.%${s}%,location.ilike.%${s}%`)
      }
      if (filters.category && filters.category !== 'all') {
        query = query.eq('category', filters.category)
      }
      if (filters.status && filters.status !== 'all') {
        query = query.eq('status', filters.status)
      }
      if (filters.location && filters.location !== 'all') {
        query = query.eq('location', filters.location)
      }
      if (filters.assignedTo && filters.assignedTo !== 'all') {
        query = query.eq('checked_out_to', filters.assignedTo)
      }

      const { data, error } = await query.order('created_at', { ascending: false }).range(0, 9999)
      if (error) throw error

      const rows = (data || []) as any[]
      setEquipment(rows as any)

      // Derive stats and filter options
      const totalEquipment = rows.length
      const availableEquipment = rows.filter(r => r.status === 'available').length
      const inUseEquipment = rows.filter(r => r.status === 'checked_out').length
      const maintenanceEquipment = rows.filter(r => r.status === 'maintenance').length
      const retiredEquipment = rows.filter(r => r.status === 'retired').length
      const totalValue = rows.reduce((sum, r) => sum + (r.current_value || 0), 0)

      setStats({
        totalEquipment,
        availableEquipment,
        inUseEquipment,
        maintenanceEquipment,
        retiredEquipment,
        totalValue,
        totalPurchaseValue: rows.reduce((s, r) => s + (r.purchase_cost || 0), 0)
      })

      setCategories([...new Set(rows.map(r => r.category).filter(Boolean))] as string[])
      setLocations([...new Set(rows.map(r => r.location).filter(Boolean))] as string[])
      setAssignedUsers([...new Set(rows.map(r => r.checked_out_to).filter(Boolean))] as string[])
      setManufacturers([])

    } catch (error) {
      console.error('Error fetching equipment:', error)
      toast.error('Failed to load equipment data')
    } finally {
      setIsLoading(false)
    }
  }
  
  // Initial data fetch
  useEffect(() => {
    fetchEquipment()
  }, [isReady])

  // Refetch data when filters change
  useEffect(() => {
    fetchEquipment()
  }, [filters, isReady])

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount)
  }

  const statusBadge = (status: Equipment['status']) => {
    if (status === 'maintenance') {
      return <Badge className="bg-orange-500 hover:bg-orange-600">In Maintenance</Badge>
    } else if (status === 'available') {
      return <Badge variant="default">Available</Badge>
    } else if (status === 'checked_out') {
      return <Badge variant="secondary">Checked Out</Badge>
    } else {
      return <Badge variant="destructive">Retired</Badge>
    }
  }

  return (
    <div className="space-y-6 w-full max-w-full overflow-x-hidden">
      {/* Header Actions */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button onClick={() => setIsAddDialogOpen(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Add Equipment
          </Button>
          
          {selectedEquipment.length > 0 && (
            <div className="flex items-center space-x-2">
              <Badge variant="secondary">
                {selectedEquipment.length} selected
              </Badge>
              <Button variant="outline" size="sm">
                Bulk Actions
              </Button>
              <Button variant="outline" size="sm">
                Export Selected
              </Button>
            </div>
          )}
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 w-full max-w-full">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Equipment</CardTitle>
            <Settings className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{isLoading ? '...' : stats?.totalEquipment || 0}</div>
            <p className="text-xs text-muted-foreground">All assets</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Available</CardTitle>
            <CheckCircle2 className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{isLoading ? '...' : stats?.availableEquipment || 0}</div>
            <p className="text-xs text-muted-foreground">Ready to use</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">In Use</CardTitle>
            <Activity className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{isLoading ? '...' : stats?.inUseEquipment || 0}</div>
            <p className="text-xs text-muted-foreground">Currently deployed</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Maintenance</CardTitle>
            <Wrench className="h-4 w-4 text-orange-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">{isLoading ? '...' : stats?.maintenanceEquipment || 0}</div>
            <p className="text-xs text-muted-foreground">Under service</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Value</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{isLoading ? '...' : formatCurrency(stats?.totalValue || 0)}</div>
            <p className="text-xs text-muted-foreground">Asset value</p>
          </CardContent>
        </Card>
      </div>

      {/* Main Content */}
      <Tabs defaultValue="equipment" className="space-y-4">
        <TabsList>
          <TabsTrigger value="equipment">All Equipment</TabsTrigger>
          <TabsTrigger value="maintenance">Maintenance</TabsTrigger>
          <TabsTrigger value="utilization">Utilization</TabsTrigger>
          <TabsTrigger value="costs">Cost Analysis</TabsTrigger>
        </TabsList>

        <TabsContent value="equipment" className="space-y-4">
          <EquipmentTable
            equipment={equipment}
            selectedEquipment={selectedEquipment}
            onSelectedEquipmentChange={setSelectedEquipment}
            onEquipmentUpdate={fetchEquipment}
            isLoading={isLoading}
          />
        </TabsContent>

        <TabsContent value="maintenance" className="space-y-4">
          {isLoading ? (
            <div className="flex justify-center py-8">
              <div className="text-muted-foreground">Loadingâ€¦</div>
            </div>
          ) : (
            <div className="grid gap-6 grid-cols-1 lg:grid-cols-2 w-full max-w-full">
              {equipment.map((item) => (
                <Card key={item.id}>
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="space-y-1">
                        <CardTitle className="text-lg">{item.name}</CardTitle>
                        <CardDescription>
                          {item.equipment_number} â€¢ {item.model || '-'}
                        </CardDescription>
                      </div>
                      <div>
                        {statusBadge(item.status)}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <p className="text-muted-foreground">Location</p>
                          <p className="font-medium">{item.location || '-'}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Serial Number</p>
                          <p className="font-medium">{item.serial_number || '-'}</p>
                        </div>
                      </div>
                      {item.checked_out_to && (
                        <div>
                          <div className="grid grid-cols-2 gap-4 text-sm">
                            <div>
                              <p className="text-muted-foreground">Checked Out To</p>
                              <p className="font-medium">{item.checked_out_to}</p>
                            </div>
                            <div>
                              <p className="text-muted-foreground">Checked Out Date</p>
                              <p className="font-medium">{item.checked_out_date ? format(new Date(item.checked_out_date), 'MMM dd, yyyy') : '-'}</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="utilization" className="space-y-4">
          {isLoading ? (
            <div className="flex justify-center py-8">
              <div className="text-muted-foreground">Loadingâ€¦</div>
            </div>
          ) : (
            <div className="grid gap-6 grid-cols-1 lg:grid-cols-2 w-full max-w-full">
              {equipment
              .sort((a, b) => (a.name || '').localeCompare(b.name || ''))
              .map((item) => (
                <Card key={item.id}>
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="space-y-1">
                        <CardTitle className="text-lg">{item.name}</CardTitle>
                        <CardDescription>
                          {item.equipment_number} â€¢ {item.model || '-'}
                        </CardDescription>
                      </div>
                      <div>
                        {statusBadge(item.status)}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <p className="text-muted-foreground">Category</p>
                          <p className="font-medium">{item.category || '-'}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Location</p>
                          <p className="font-medium">{item.location || '-'}</p>
                        </div>
                      </div>

                      {item.checked_out_to && (
                        <div className="p-4 bg-muted/50 rounded-lg space-y-2">
                          <p className="text-sm font-medium">Currently Checked Out</p>
                          <div className="grid grid-cols-2 gap-4 text-sm">
                            <div>
                              <p className="text-muted-foreground">Assigned To</p>
                              <p className="font-medium">{item.checked_out_to}</p>
                            </div>
                            <div>
                              <p className="text-muted-foreground">Since</p>
                              <p className="font-medium">{item.checked_out_date ? format(new Date(item.checked_out_date), 'MMM dd, yyyy') : '-'}</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="costs" className="space-y-4">
          {isLoading ? (
            <div className="flex justify-center py-8">
              <div className="text-muted-foreground">Loadingâ€¦</div>
            </div>
          ) : (
            <div className="grid gap-6 grid-cols-1 lg:grid-cols-2 w-full max-w-full">
              {equipment.map((item) => {
                return (
                  <Card key={item.id}>
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div className="space-y-1">
                          <CardTitle className="text-lg">{item.name}</CardTitle>
                          <CardDescription>
                            {item.equipment_number} â€¢ {item.model || '-'}
                          </CardDescription>
                        </div>
                        <div className="text-right">
                          <p className="text-xs text-muted-foreground">Current Value</p>
                          <p className="text-lg font-bold">{formatCurrency(item.current_value || 0)}</p>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <p className="text-muted-foreground">Purchase Cost</p>
                            <p className="font-medium">{formatCurrency(item.purchase_cost || 0)}</p>
                          </div>
                          <div>
                            <p className="text-muted-foreground">Depreciation</p>
                            <p className="font-medium">
                              {item.current_value && item.purchase_cost
                                ? `${Math.round((1 - item.current_value / item.purchase_cost) * 100)}%`
                                : '-'}
                            </p>
                          </div>
                        </div>
                        
                        <div>
                          <p className="text-muted-foreground mb-2">Status</p>
                          {statusBadge(item.status)}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))
              })}
            </div>
          )}
        </TabsContent>
      </Tabs>

      {/* Add Equipment Dialog */}
      <AddEquipmentDialog
        isOpen={isAddDialogOpen}
        onClose={() => setIsAddDialogOpen(false)}
        onEquipmentAdded={() => {
          fetchEquipment()
          setIsAddDialogOpen(false)
        }}
        categories={categories}
        locations={locations}
        manufacturers={manufacturers}
      />
    </div>
  )
}
